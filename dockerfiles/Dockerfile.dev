FROM debian:latest

ARG username="devu"
ARG userhome="/home/${username}"

ENV HOME ${userhome}

RUN apt update
RUN apt upgrade -y
RUN apt update

# Docker & compose to manipulate and create other containers
RUN apt-get -y install \
	ca-certificates \
	curl \
	gnupg \
	lsb-release \
	wget

RUN mkdir -p /etc/apt/keyrings
RUN curl -fsSL https://download.docker.com/linux/debian/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
RUN echo \
	"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian \
	$(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null

RUN apt update
RUN apt-get -y install docker-ce docker-ce-cli containerd.io docker-compose-plugin
# docker-engine docker.io containerd runc
# RUN apt-get -y docker-compose
# RUN apt-get -y docker.io

RUN apt install -y python3 \
	python3-pip cmake \
	openssh-server \
	build-essential \
	libpthread-stubs0-dev \
	autoconf automake pkg-config \
	nodejs npm

#zmq
RUN apt install -y libzmq3-dev

#Graph dep
RUN apt-get install -y libclang-dev libgtk-3-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libxkbcommon-dev libssl-dev

# boost
RUN apt install -y libboost-dev

# Computer Graphics - OpenGL
RUN apt install -y \
	libpng-dev libglu1-mesa-dev libx11-dev \
	libglfw3-dev \
	libglew-dev \
	libgles2-mesa-dev \
	freeglut3-dev \
	libfontconfig libfontconfig1-dev

# x11 nginx
WORKDIR /opt/rtmp
RUN apt-get -y install build-essential libpcre3 libpcre3-dev libssl-dev nginx
RUN wget https://github.com/sergey-dryabzhinsky/nginx-rtmp-module/archive/dev.zip

#Misc
RUN apt install -y \
	git nano \
	sudo \
	tmux \
	fish \
	firefox-esr \
	libreoffice \
	inkscape

#Simulators, Tools
RUN apt install -y \
	ktechlab \
	sonic-visualiser 

RUN pip install numpy \
	pandas openpyxl \
	matplotlib \
	scipy\
	gns3-server\
	gns3-gui \
	# tensorflow-gpu \
	keras tensorflow nltk

# webscrapper
RUN pip install selenium

# Universal Ctags
RUN	git clone https://github.com/universal-ctags/ctags.git; \
	cd ctags; \
	./autogen.sh; \
	./configure; \
	make; \
	make install

# # Get emscripten source
# RUN git clone https://github.com/emscripten-core/emscripten.git

# # Get the emsdk repo
# RUN git clone https://github.com/emscripten-core/emsdk.git

# # Enter that directory
# WORKDIR /emsdk

# # Fetch the latest version of the emsdk (not needed the first time you clone)
# RUN git pull

# # Download and install the latest SDK tools.
# RUN ./emsdk install latest

# # Make the "latest" SDK "active" for the current user. (writes .emscripten file)
# RUN ./emsdk activate latest

# # Activate PATH and other environment variables in the current terminal
# RUN bash ./emsdk_env.sh

#-------------dev-ops-------------------------------

# Kubectl

# Add the Kubernetes signing key
RUN curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -

# Add the Kubernetes repository
RUN echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list

# Install kubectl
RUN sudo apt-get update && sudo apt-get install -y kubectl

# kustomize

# Download the latest kustomize binary
RUN curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash

# Move the binary to a directory in your PATH
RUN sudo mv kustomize /usr/local/bin/

# fluxcd

# Download the latest fluxctl binary
RUN curl -sL https://github.com/fluxcd/flux/releases/latest/download/fluxctl_linux_amd64 -o fluxctl

# Move the binary to a directory
RUN mv fluxctl /usr/local/bin

# helm

WORKDIR /opt/helm
RUN curl -sL https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 -o install_helm.sh
RUN bash install_helm.sh

#---------------------------------------------------

# User
RUN groupadd -r ${username}
RUN useradd -rm -d ${userhome} -s /usr/bin/fish -g ${username} -u 1000 ${username}
RUN adduser ${username} sudo
RUN chown -R ${username}:${username} ${userhome}
RUN echo ${username}:${username} | chpasswd

WORKDIR ${userhome}/repo

RUN service ssh start
CMD ["/usr/sbin/sshd","-D"]
EXPOSE 22

#Rust
RUN curl https://sh.rustup.rs -sSf | bash -s -- -y
ENV PATH="$HOME/.cargo/bin:${PATH}"
RUN chown -R $USER $HOME/.cargo/
RUN chown -R $USER $HOME/.rustup/
RUN curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

# Install Rust tooling
ARG RUST_ANALYZER_VERSION=2023-01-02
RUN wget -qO- "https://github.com/rust-analyzer/rust-analyzer/releases/download/${RUST_ANALYZER_VERSION}/rust-analyzer-$(uname -m)-unknown-linux-gnu.gz" | \
    gunzip > /usr/local/bin/rust-analyzer && \
    chmod 500 /usr/local/bin/rust-analyzer
RUN rustup component add clippy rustfmt

USER ${username}

ENV fish_greeting="Alle Anfang ist schwer, anfangen ist Einfach, Beharrlichkeit eine Kunst."
RUN echo "bash $HOME/repo/scripts/set.sh" >> ${userhome}/.bashrc

CMD ["/bin/bash", "-c", "source", "/emsdk/emsdk_env.sh"]
ENTRYPOINT ["/usr/bin/fish", "-c"]
